# Imports
import hashlib, sys
import sqlite3 as sql
import os, stat
import psutil
import datetime
from time import sleep

###################################################
# Validation

# checks if input is number
def isNum(text):
	try:
		int(text)
		return True
	except:
		return False

# checks if path is file not directory 
def isfilePath(fpath):
	try:
		os.path.isfile(fpath)
		return True
	except:
		return False

# checks if signature is valid
def isValidHash(signature):
	return len(signature) == 64
###################################################
# DBHandle

# create signaturs Table
def create_DB():
	if not(os.path.exists('footprints.db')):
		conn = sql.connect('footprints.db', check_same_thread=False)
		conn.execute('''CREATE TABLE footprints (
		     				footprint CHAR(64) PRIMARY KEY NOT NULL
		     			);''')
		conn.close()
		os.chmod("footprints.db", stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)

# add hash to DB
def add_hash(data):
	try:
		conn = sql.connect('footprints.db', check_same_thread=False)
		conn.execute('INSERT INTO footprints(footprint) VALUES (?);', [data])
		conn.commit()
		conn.close()
	except:
		pass
	
# delete hash to DB
def delete_hash(data):
	try:
		conn = sql.connect('footprints.db', check_same_thread=False)
		conn.execute('DELETE FROM footprints WHERE footprint = ?;', [data])
		conn.commit()
		conn.close()
	except:
		pass

# get all hashes from DB
def get_hashes():
	result = []
	conn = sql.connect('footprints.db', check_same_thread=False)
	query = conn.execute('SELECT footprint FROM footprints;')
	NotListResult = query.fetchall()
	for i in NotListResult:
		result.append(i[0])
	conn.close()
	return result

# Compare hash with DB hashes
def compare_DB(data):
	return data in get_hashes()
###################################################
# AddVirusToDB

# read binary file
def getFile(path):
	try:
		fh = open(path, "rb")
		file_content = fh.read()
		fh.close()
		return file_content
	except:
		return False

# calculate hash for data
def sha256(data):
	return hashlib.sha256(data).hexdigest()

# Add paths to DB
def add_footprint_to_DB(paths):
	for i in paths:
		signature = sha256(getFile(i))
		add_hash(signature)
		
###################################################
# helperFunctions

# get the path for PID
def get_path_for_pid(PID):
	return f"/proc/{PID}/exe"

# get paths of all running processes
def getRunningProcesses():
	processes_paths = []
	for proc in psutil.process_iter():
		try:
		    # Get process name & pid from process object.
		    # processName = proc.name()
		    processes_paths.append(proc.pid)
		except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
		    pass
	return processes_paths

def getRecentFiles(hpath, last, first = False):
	files_paths = []
	for root, directories, files in os.walk(hpath, topdown=False):
		for name in files:
			file_path = os.path.join(root, name)
			try:
				modified_time = os.path.getmtime(file_path)
				creation_time = os.path.getctime(file_path)
				if (last < modified_time) or (last < creation_time) or first:
					files_paths.append(file_path)
			except:
				# print(f"{file_path} can't be accessed.")
				pass
	return files_paths
###################################################
# Scanner
 
class NotSudo(Exception):
    pass

def get_valid_path():
	while True:
		path = input('Please, Enter valid virus file path: ')
		if isfilePath(path):
			break
	return path

def get_valid_signature():
	while True:
		signature = input('Please, Enter valid virus file signature: ')
		signature = signature.replace(" ", "")
		if isValidHash(signature):
			break
	return signature

def Add_hash_path():
	path = get_valid_path()
	add_footprint_to_DB([path])
	
def Add_hash_signature():
	add_hash(get_valid_signature())

def delete_hash_path():
	path = get_valid_path()
	signature = sha256(getFile(path))
	delete_hash(signature)

def delete_hash_signature():
	delete_hash(get_valid_signature())
	
def ask_user(path, path_type, both=False):
	print(f"The {path_type} in '{path}' is a virus.")
	while(True):
		part = "terminate & " if both else ""
		ans = input(f"Do you want to {part}delete it? [y/n]")
		if ans in "YyNn":
			break
	return ans in "Yy"

def check_process_associated_to_file(fpath):
	PIDs = getRunningProcesses()
	for PID in PIDs:
		path = get_path_for_pid(PID)
		if getFile(path) == getFile(fpath):
			if ask_user(fpath, "file", True):
				try:
					os.kill(path, 9)
					os.remove(fpath)
					print("The file deleted successfully.")
					return None
				except:
					print("The file can't be deleted.")
					return None
			else:
				print("The file isn't deleted, You will be in danger.")
				return None	
	if ask_user(fpath, "file"):
		try:
			os.remove(fpath)
			print("The file deleted successfully.")
			return None
		except:
			print("The file can't be deleted.")
			return None

def scan_file():
	path = get_valid_path()
	signature = sha256(getFile(path))
	if compare_DB(signature):
		check_process_associated_to_file(path)


def Scan(hpath, last, first=False):
	# Scanning all running processes
	PIDs = getRunningProcesses()
	for i in PIDs:
		process_path = get_path_for_pid(i)
		try:
			content = getFile(process_path)
			signature = sha256(content)
			if compare_DB(signature):
				print(f"The process in path: '{process_path}' is a virus.")
				while(True):
					ans = input("Do you want to delete it? [y/n]")
					if ans in "Yy":
						try:
							os.kill(i, 9)
							print("Process is terminated successfully.")
						except:
							print("Process can't be terminated.")
							pass
						break
					elif ans in "Nn":
						print("Process isn't terminated, You may be at risk.")
						break
		except:
			pass
	print("========================================================")
	# Scanning all recent added or modified files	
	paths = getRecentFiles(hpath, last, first)
	for i in paths:
		try:
			signature = sha256(getFile(i))
			if compare_DB(signature):
				print(f"The file in path: '{i}' is a virus.")
				while(True):
					ans = input("Do you want to delete it? [y/n]")
					if ans in "Yy":
						try:
							os.remove(i)
							print("File is deleted successfully.")
						except:
							print("File can't be deleted.")
							pass
						break
					elif ans in "Nn":
						print("File isn't deleted, You may be at risk.")
						break
		except:
			pass
		
def real_time_scan():
	while True:
		DELAY = input("Enter wanted Delay time: ")
		if isNum(DELAY):
			DELAY = int(DELAY)
			break
	first = True
	last = 0
	while True:
		part = "all" if first else "recent added or modified"
		print("############################################################################")
		print(f"Start scanning {part} files on system")
		before = (datetime.datetime.now() - datetime.datetime(1970,1,1)).total_seconds() + 5 * 3600
		Scan("/home/kali/", last, first)
		print(f"Finished Scanning, Sleep for {DELAY} seconds")
		last = before
		first = False
		sleep(DELAY)

def main():
	create_DB()
	print(''' 
Choose what option you want to do:
	1) Add file's footprint to DB via path
	2) Add file's footprint to DB via signature
	3) Remove file footprint from DB via path
	4) Remove file footprint from DB via signature
	5) Scan a file
	6) Start Scanning to System
======================================================
''')
	while True:		
		user_choice = input('''Enter your choice (1 : 6): ''')
		if isNum(user_choice):
			if 0 < int(user_choice) < 7:
				choice = int(user_choice)
				break
			else:
				print("Please, Enter numeric value within the specific range.\n")
		else:
			print("Please, Enter numeric value.\n")
	if choice == 1:
		Add_hash_path()
	elif choice == 2:
		Add_hash_signature()
	elif choice == 3:
		delete_hash_path()
	elif choice == 4:
		delete_hash_signature()
	elif choice == 5:
		scan_file()
	else:
		real_time_scan()
	

if __name__ == "__main__":
	if os.getuid() != 0:
		raise NotSudo("This program is not run as sudo or elevated this it will not work")
	else:
		#print("ACCESS SUCCESS")
		main()

