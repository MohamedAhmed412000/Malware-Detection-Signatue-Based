#include "helperFunctions.h"
#include "DBHandle.h"

vector<string> getRecentFiles(string path, time_t last, bool first) {
	vector<string> p;
	struct stat s;
	if(stat(path.c_str(), &s) == 0 )
	{
	    if( s.st_mode & S_IFDIR )
	    {
		//it's a directory
		for (const auto & entry : fs::directory_iterator(path)) {
			vector<string> p1 = getRecentFiles(entry.path(), last, first);
			p.insert(p.end(), p1.begin(), p1.end());
		}
	    }
	    else if( s.st_mode & S_IFREG )
	    {
		//it's a file
		time_t lastmodified = s.st_mtime;
		time_t lastaccess = s.st_atime;
		if ((last < lastmodified) || (last < lastaccess) || first) {
			p.push_back(path);
			
		}
		
	    }
	}
	return p;
}

void Scan(string homePath, time_t last, bool first) {
	// Scanning all running processes
	vector<string> paths = path();		// array of paths for all running processes
	for(unsigned int i = 0; i < paths.size(); i++) {
		string *buffer = &(getFile(paths[i]));	// get the binary data for running process
		string x = sha256(*buffer);		// get the footprint of binary data of running process
		bool stat = readCSV(x);			// compare the footprint with all footprints stored in DB	
		if(stat == true){
			pid_t process = grap_proc(paths[i]);	// get numeric value of PID
			kill(process, SIGINT);			// kill the process that has this PID
			
		}
	}
	
	// Scanning all recent added or modified files
	vector<string> p = getRecentFiles(homePath, last, first);											// get all paths of recent modified aor added files to system
	for(unsigned int i = 0; i < p.size(); i++) {
    		string *exe = &(getFile(p[i]));	// get the binary file of this path
    		string x = sha256(*exe);	// calculate the footprint of this binary file
    		bool stat = readCSV(x);		// compare this footprint with all footprints stored in DB
    		if(stat == true){
				// Delete virus file
				cout << "The file in path:" << p[i] << " is a virus so it's deleted\n";
				remove(p[i].c_str());	// remove this file
			}
    	}	
}

int main()
{
	bool first = true;
	time_t last = time(NULL);
	do {
		string str = (first)? "all ":"recent added or modified ";
		cout << "Scanning " << str << "files on system\n";
		Scan("/home/", last, first);
    		cout << "Finished Scanning, Sleep for " << DELAY << " seconds\n";
    		first = false;
    		last = time(NULL);
    		std::this_thread::sleep_for(std::chrono::milliseconds(DELAY * 1000));
	} while (true);
	
    	return 0;
}
